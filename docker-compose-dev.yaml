version: '3'
# docker compose logs -f api_membresias api_promociones api_clientes api_orquestador
services:
# ORQUESTADOR
  api_orquestador:
    build:
      context: ./api-orquestador
      dockerfile: Dockerfile
    container_name: api-orquestador-fastapi
    ports:
      - "5000:8000"
    volumes:
      - ./api-orquestador:/app
    depends_on:
      - api_clientes
      - api_membresias
      - api_promociones
    networks:
      - api-network
      

# MEMBRESIAS
  api_membresias:
    build:
      context: ./api-membresias
      dockerfile: Dockerfile
    container_name: api-membresias-golang
    ports:
      - "5002:8002"
    volumes:
      - ./api-membresias:/app
    environment:
      - DB_HOST=postgresql_database
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
    depends_on:
      - postgresql_database
    networks:
      - membresias-network
      - api-network
    
  postgresql_database:
    image: postgres:16
    container_name: postgresql_database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./api-membresias/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - membresias-network
    
# PROMOCIONES
  api_promociones:
    build:
      context: ./api-promociones
      dockerfile: Dockerfile
    container_name: api-promociones-nodejs
    ports:
      - "5003:8003"
    volumes:
      - ./api-promociones:/app
      - /app/node_modules
    environment:
      - MONGO_URI=mongodb://mongo_database/promociones_db
    depends_on:
      - mongo_database
    networks:
      - promociones-network
      - api-network

  mongo_database:
    image: mongo
    container_name: mongo_database
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./api-promociones/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - promociones-network
    # logging:
    #   driver: "none"
    # https://www.mongodb.com/docs/manual/tutorial/install-mongodb-community-with-docker/
    # mongosh --username admin --password 
    # command: bash -c 'sleep 30 && mongosh --username admin --password password < /docker-entrypoint-initdb.d/init.js'

# CLIENTES
  api_clientes:
    build:
      context: ./api-clientes
      dockerfile: Dockerfile
    container_name: api-clientes-fastapi
    ports:
      - "5001:8001"
    volumes:
      - ./api-clientes:/app
    environment:
      - DB_USER=root
      - DB_PASSWORD=utec
      - DB_HOST=mysql_database
      - DB_PORT=3306
      - DB_NAME=mysql
    depends_on:
      - mysql_database
    networks:
      - clientes-network
      - api-network

  mysql_database:
    image: mysql:8.0
    container_name: mysql_database
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: utec
      # MYSQL_DATABASE: mysql
    volumes:
      - mysql_data:/var/lib/mysql
    #   - ./api-clientes/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - clientes-network
    
  # adminer_c:
  #   image: adminer
  #   container_name: adminer_c
  #   ports:
  #     - "8080:8080"

# SWAGGER
  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "5005:8080"
    environment:
      - SWAGGER_JSON=/catalog/api-clientes.yaml
    volumes:
      - ./catalog:/catalog
    networks:
      - api-network

volumes:
  mysql_data:
  postgresql_data:
  mongodb_data:

networks:
  promociones-network:
    driver: bridge
  clientes-network:
    driver: bridge
  membresias-network:
    driver: bridge
  api-network:
    driver: bridge